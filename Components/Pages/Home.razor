@page "/"
@using Microsoft.AspNetCore.Authorization
@using Serverside.Codes
@using Serverside.DTO
@using Serverside.Data
@using Serverside.Models
@using Microsoft.EntityFrameworkCore

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject TodoDbContext _todoContext
@inject EncryptionHandler _encryptionHandler
@inject AsyncEncryptionHandler _asyncEncryptionHandler

@attribute [Authorize(Policy = "AuthenticatedUser")]

<PageTitle>Home</PageTitle>

<div class="container mt-3">
    @if (!string.IsNullOrWhiteSpace(error))
    {
        <div class="alert alert-danger">@error</div>
    }

    <h1 class="mb-3">User: @username</h1>

    @if (!isCPRVerified)
    {
        <div class="form-group">
            <label for="_cprInput">Indtast CPR Nummer:</label>
            <input type="text" id="_cprInput" class="form-control" value="@CprInput" @oninput="HandleInput" maxlength="11" />
            <button class="btn btn-primary mt-2" @onclick="SubmitCpr">Submit</button>
        </div>
    }
    else
    {
        <p>Dit cpr-nr: @_hashedCpr</p>

        <div class="form-group">
            <label for="_itemInput">Indtast ToDo:</label>
            <input type="text" id="_itemInput" class="form-control" @bind="_itemInput" />
            <button class="btn btn-success mt-2" @onclick="SubmitItem">Submit</button>
        </div>

        <table class="table mt-3">
            <thead>
                <tr>
                    <th>User</th>
                    <th>Item</th>
                </tr>
            </thead>
            <tbody>
                @if (todoList != null)
                {
                    @foreach (var todo in todoList)
                    {
                        <tr>
                            <td>@todo.User</td>
                            <td>@todo.Item</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
</div>

@code {
    private bool isCPRVerified = false; // has the user submitted a valid cpr

    public string CprInput
    {
        get => _cprInput!;
        set
        {
            _cprInput = InsertDash(value);
        }
    } 

    private string? username; // username of the authenticated user
    private string? _cprInput; // input field for cpr
    private string? _itemInput; // input field for todo item
    private string? _hashedCpr; // hashed cpr number
    private string? error; // error message

    private List<TodoListDTO> todoList { get; set; } = new List<TodoListDTO>(); // list of todo items

    private string? hashTest1;
    private string? hashTest2;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        username = authState.User.Identity!.IsAuthenticated ? authState.User.Identity.Name : "";
    }

    private async Task SubmitItem()
    {
        ClearError();
        if (string.IsNullOrEmpty(_itemInput))
        {
            SetError("Item cannot be empty");
            return;
        }

        await InsertItem();
        _itemInput = string.Empty; // Reset input field
    }

    private async Task SubmitCpr()
    {
        ClearError();
        var numericCpr = CprInput.Replace("-", "");
        if (numericCpr.Length != 10)
        {
            SetError("CPR number must be exactly 10 digits.");
            return;
        }

        HashingHandler hashingHandler = new HashingHandler(numericCpr);
        var hash = hashingHandler.HMACHashing();

        if (!await VerifyAndInsertCpr(hash))
        {
            SetError("Invalid CPR number.");
            return;
        }

        _hashedCpr = hash;
        _cprInput = string.Empty;
        CprInput = string.Empty;
        todoList = await FetchTodo();
        isCPRVerified = true;
    }

    private async Task<bool> VerifyAndInsertCpr(string hash)
    {
        var cprRecord = await _todoContext.Cprs.FirstOrDefaultAsync(c => c.User == username);

        if (cprRecord == null)
        {
            await InsertCpr(hash);
            return true;
        }

        return hash == cprRecord.CprNr;
    } 

    private async Task<List<TodoListDTO>> FetchTodo()
    {
        // Fetch all todo items for the user asynchronously
        var todoItems = await _todoContext.TodoLists
            .Where(todo => todo.User == username)
            .ToListAsync();

        List<TodoListDTO> decryptedItems = todoItems.Select(todo => new TodoListDTO
        {
            User = todo.User,
            Item = _asyncEncryptionHandler.Decrypt(todo.Item)
        }).ToList();


        return decryptedItems;
    }

    private async Task InsertItem()
    {
        var newItem = new TodoList
        {
            Item = _asyncEncryptionHandler.Encrypt(_itemInput),
            User = username
        };

        _todoContext.TodoLists.Add(newItem);
        await _todoContext.SaveChangesAsync(); // Save changes asynchronously
        todoList.Add(new TodoListDTO { User = username, Item = _itemInput});
    }

    private async Task InsertCpr(string cpr)
    {
        var newCpr = new Cpr
            {
                CprNr = cpr,
                User = username
            };

        _todoContext.Cprs.Add(newCpr);
        await _todoContext.SaveChangesAsync(); // Save changes asynchronously
    }

    private void HandleInput(ChangeEventArgs e)
    {
        var inputValue = e.Value.ToString();
        CprInput = InsertDash(inputValue);
    }

    private string InsertDash(string value)
    {
        if (value == null) return null;

        // Remove any existing dashes to avoid duplication
        var numericValue = value.Replace("-", "");

        // Ensure we don't exceed the max length without the dash
        if (numericValue.Length > 10) numericValue = numericValue.Substring(0, 10);

        // Insert dash after the 6th character if length is sufficient
        if (numericValue.Length > 6) return numericValue.Insert(6, "-");

        return numericValue;
    }

    private void SetError(string message)
    {
        error = message;
    }

    private void ClearError()
    {
        error = string.Empty;
    }
}
